{"version":3,"sources":["logo.svg","Redux/Corona/CoronaReducers.js","Redux/store.js","Redux/Corona/CoronaActionTypes.js","Redux/Corona/CoronaActioncreator.js","colors/color.js","Component/CoronaCases.js","Component/Header.js","Component/StateWiseCase.js","Component/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initstate","cases","CaseswithTimeSeries","store","createStore","state","action","type","payload","applyMiddleware","thunk","fetchJson","dispatch","fetch","then","res","json","result","data","getCaseTimeSeries","CSS_COLOR_NAMES","connect","fetchdata","props","Row","Col","md","striped","hover","options","paginationPosition","pagination","isKey","dataField","dataSort","filter","delay","numberComparators","Header","to","getStateData","labels","_","pluck","datasets","label","backgroundColor","data2","first","length","chartOptions","maintainAspectRatio","height","width","keyField","Main","exact","path","component","CoronaCases","StateWiseCase","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,kC,yICErCC,EAAY,CAAEC,MAAO,GAAIC,oBAAqB,I,QCCvCC,EAAQC,aDAS,WAAgC,IAA/BC,EAA8B,uDAAtBL,EAAWM,EAAW,uCAC3D,OAAQA,EAAOC,MACb,IELyB,gBFMvB,OAAO,2BAAKF,GAAZ,IAAmBJ,MAAOK,EAAOE,UACnC,IEN0B,iBFOxB,OAAO,2BAAKH,GAAZ,IAAmBH,oBAAqBI,EAAOE,UACjD,QACE,OAAOH,KCPoCI,YAAgBC,M,QEIpDC,EAAY,WACvB,OAAO,SAAAC,GACLC,MAAM,0CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJL,EAVC,CAAEL,KDFkB,gBCEGC,QAUES,EAAM,YAChCL,EATyB,SAAAM,GAC/B,MAAO,CAAEX,KDJmB,iBCIGC,QAASU,GAQzBC,CAAkBF,EAAM,yB,eCb5BG,EAAkB,CAC7B,OACA,aACA,SAEA,QACA,SACA,QACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,WACA,UACA,OACA,WACA,WACA,gBACA,WACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,OACA,QACA,cACA,WACA,UACA,YACA,SACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,YACA,aACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,gBACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,O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","file":"static/js/main.22098b57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// import React from \"react\";\r\nimport { StateWiseData, CaseTimeSeries } from \"./CoronaActionTypes\";\r\nconst initstate = { cases: [], CaseswithTimeSeries: [] };\r\nexport const CoronaReducers = (state = initstate, action) => {\r\n  switch (action.type) {\r\n    case StateWiseData:\r\n      return { ...state, cases: action.payload };\r\n    case CaseTimeSeries:\r\n      return { ...state, CaseswithTimeSeries: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { CoronaReducers } from \"./Corona/CoronaReducers\";\r\nimport thunk from \"redux-thunk\";\r\nexport const store = createStore(CoronaReducers, applyMiddleware(thunk));\r\n","export const StateWiseData = \"StateWiseData\";\r\nexport const CaseTimeSeries = \"CaseTimeSeries\";\r\n","import { StateWiseData, CaseTimeSeries } from \"./CoronaActionTypes\";\r\nexport const getstatewisedata = data => {\r\n  return { type: StateWiseData, payload: data };\r\n};\r\nexport const getCaseTimeSeries = data => {\r\n  return { type: CaseTimeSeries, payload: data };\r\n};\r\nexport const fetchJson = () => {\r\n  return dispatch => {\r\n    fetch(\"https://api.covid19india.org/data.json\")\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        dispatch(getstatewisedata(result[\"statewise\"]));\r\n        dispatch(getCaseTimeSeries(result[\"cases_time_series\"]));\r\n      });\r\n  };\r\n};\r\n","export const CSS_COLOR_NAMES = [\r\n  \"Aqua\",\r\n  \"Aquamarine\",\r\n  \"Yellow\",\r\n\r\n  \"Beige\",\r\n  \"Bisque\",\r\n  \"Black\",\r\n  \"BlanchedAlmond\",\r\n  \"Blue\",\r\n  \"BlueViolet\",\r\n  \"Brown\",\r\n  \"BurlyWood\",\r\n  \"CadetBlue\",\r\n  \"Chartreuse\",\r\n  \"Chocolate\",\r\n  \"Coral\",\r\n  \"CornflowerBlue\",\r\n  \"Cornsilk\",\r\n  \"Crimson\",\r\n  \"Cyan\",\r\n  \"DarkBlue\",\r\n  \"DarkCyan\",\r\n  \"DarkGoldenRod\",\r\n  \"DarkGray\",\r\n  \"DarkGrey\",\r\n  \"DarkGreen\",\r\n  \"DarkKhaki\",\r\n  \"DarkMagenta\",\r\n  \"DarkOliveGreen\",\r\n  \"DarkOrange\",\r\n  \"DarkOrchid\",\r\n  \"DarkRed\",\r\n  \"DarkSalmon\",\r\n  \"DarkSeaGreen\",\r\n  \"DarkSlateBlue\",\r\n  \"DarkSlateGray\",\r\n  \"DarkSlateGrey\",\r\n  \"DarkTurquoise\",\r\n  \"DarkViolet\",\r\n  \"DeepPink\",\r\n  \"DeepSkyBlue\",\r\n  \"DimGray\",\r\n  \"DimGrey\",\r\n  \"DodgerBlue\",\r\n  \"FireBrick\",\r\n  \"FloralWhite\",\r\n  \"ForestGreen\",\r\n  \"Fuchsia\",\r\n  \"Gainsboro\",\r\n  \"GhostWhite\",\r\n  \"Gold\",\r\n  \"GoldenRod\",\r\n  \"Gray\",\r\n  \"Grey\",\r\n  \"Green\",\r\n  \"GreenYellow\",\r\n  \"HoneyDew\",\r\n  \"HotPink\",\r\n  \"IndianRed\",\r\n  \"Indigo\",\r\n  \"Ivory\",\r\n  \"Khaki\",\r\n  \"Lavender\",\r\n  \"LavenderBlush\",\r\n  \"LawnGreen\",\r\n  \"LemonChiffon\",\r\n  \"LightBlue\",\r\n  \"LightCoral\",\r\n  \"LightCyan\",\r\n  \"LightGoldenRodYellow\",\r\n  \"LightGray\",\r\n  \"LightGrey\",\r\n  \"LightGreen\",\r\n  \"LightPink\",\r\n  \"LightSalmon\",\r\n  \"LightSeaGreen\",\r\n  \"LightSkyBlue\",\r\n  \"LightSlateGray\",\r\n  \"LightSlateGrey\",\r\n  \"LightSteelBlue\",\r\n  \"LightYellow\",\r\n  \"Lime\",\r\n  \"LimeGreen\",\r\n  \"Linen\",\r\n  \"Magenta\",\r\n  \"Maroon\",\r\n  \"MediumAquaMarine\",\r\n  \"MediumBlue\",\r\n  \"MediumOrchid\",\r\n  \"MediumPurple\",\r\n  \"MediumSeaGreen\",\r\n  \"MediumSlateBlue\",\r\n  \"MediumSpringGreen\",\r\n  \"MediumTurquoise\",\r\n  \"MediumVioletRed\",\r\n  \"MidnightBlue\",\r\n  \"MintCream\",\r\n  \"MistyRose\",\r\n  \"Moccasin\",\r\n  \"NavajoWhite\",\r\n  \"Navy\",\r\n  \"OldLace\",\r\n  \"Olive\",\r\n  \"OliveDrab\",\r\n  \"Orange\",\r\n  \"OrangeRed\",\r\n  \"Orchid\",\r\n  \"PaleGoldenRod\",\r\n  \"PaleGreen\",\r\n  \"PaleTurquoise\",\r\n  \"PaleVioletRed\",\r\n  \"PapayaWhip\",\r\n  \"PeachPuff\",\r\n  \"Peru\",\r\n  \"Pink\",\r\n  \"Plum\",\r\n  \"PowderBlue\",\r\n  \"Purple\",\r\n  \"RebeccaPurple\",\r\n  \"Red\",\r\n  \"RosyBrown\",\r\n  \"RoyalBlue\",\r\n  \"SaddleBrown\",\r\n  \"Salmon\",\r\n  \"SandyBrown\",\r\n  \"SeaGreen\",\r\n  \"SeaShell\",\r\n  \"Sienna\",\r\n  \"Silver\",\r\n  \"SkyBlue\",\r\n  \"SlateBlue\",\r\n  \"SlateGray\",\r\n  \"SlateGrey\",\r\n  \"Snow\",\r\n  \"SpringGreen\",\r\n  \"SteelBlue\",\r\n  \"Tan\",\r\n  \"Teal\",\r\n  \"Thistle\",\r\n  \"Tomato\",\r\n  \"Turquoise\",\r\n  \"Violet\",\r\n  \"Wheat\",\r\n  \"White\",\r\n  \"WhiteSmoke\",\r\n\r\n  \"YellowGreen\",\r\n  \"AliceBlue\",\r\n  \"AntiqueWhite\",\r\n  \"Azure\"\r\n];\r\n","import React from \"react\";\r\nimport { fetchJson } from \"../Redux/RootActionCreator\";\r\nimport { Line, Doughnut, Bar } from \"react-chartjs-2\";\r\nimport { connect } from \"react-redux\";\r\nimport { default as _ } from \"underscore\";\r\nimport { CSS_COLOR_NAMES } from \"../colors/color\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import { default as $ } from \"jquery\";\r\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\r\nimport \"react-bootstrap-table/dist/react-bootstrap-table-all.min.css\";\r\nfunction CoronaCases(props) {\r\n  //table\r\n  const options = {\r\n    paginationPosition: \"both\"\r\n  };\r\n  //\r\n  return (\r\n    <div>\r\n      {/* {JSON.stringify(props)} */}\r\n\r\n      <Row>\r\n        <Col md={12}>\r\n          <BootstrapTable\r\n            striped\r\n            hover\r\n            data={props.CaseswithTimeSeries}\r\n            options={options}\r\n            pagination\r\n          >\r\n            <TableHeaderColumn isKey dataField=\"date\" dataSort={true}>\r\n              Date\r\n            </TableHeaderColumn>\r\n            <TableHeaderColumn\r\n              dataField=\"dailyconfirmed\"\r\n              filter={{\r\n                type: \"NumberFilter\",\r\n                delay: 1000,\r\n                numberComparators: [\"=\", \">\", \"<=\"]\r\n              }}\r\n            >\r\n              {\" \"}\r\n              Confirmed\r\n            </TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"dailydeceased\">\r\n              Deceased\r\n            </TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"dailyrecovered\">\r\n              Recovered\r\n            </TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"totalconfirmed\">\r\n              Total Confirmed\r\n            </TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"totaldeceased\">\r\n              Total Deceased\r\n            </TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"totalrecovered\">\r\n              Total Recovered\r\n            </TableHeaderColumn>\r\n          </BootstrapTable>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = state => {\r\n  return { cases: state.cases, CaseswithTimeSeries: state.CaseswithTimeSeries };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchdata: dispatch(fetchJson())\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CoronaCases);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <header>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/CoronaCases\">CoronaCases</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/StateWiseCases\">StateWiseCases</Link>\r\n            </li>\r\n            {/* <li>\r\n              <Link to=\"/schedule\">Schedule</Link>\r\n            </li> */}\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { fetchJson } from \"../Redux/RootActionCreator\";\r\nimport { connect } from \"react-redux\";\r\nimport { Line, Doughnut, Bar } from \"react-chartjs-2\";\r\nimport { default as _ } from \"underscore\";\r\nimport { CSS_COLOR_NAMES } from \"../colors/color\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import { default as $ } from \"jquery\";\r\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\r\nimport \"react-bootstrap-table/dist/react-bootstrap-table-all.min.css\";\r\nfunction StateWiseCase(props) {\r\n  //table\r\n  const options = {\r\n    paginationPosition: \"both\"\r\n  };\r\n  //\r\n  //charts\r\n  const data = {\r\n    labels: _.pluck(props.cases, \"state\"),\r\n    datasets: [\r\n      {\r\n        label: [\"Active Cases\"],\r\n        backgroundColor: \"green\",\r\n        //  _.first(CSS_COLOR_NAMES, props.cases.length),\r\n        // borderColor: \"yellow\",\r\n        data: _.pluck(props.cases, \"active\")\r\n      },\r\n      {\r\n        label: [\"Confirmed Cases\"],\r\n        backgroundColor: \"orange\",\r\n        //  _.first(CSS_COLOR_NAMES, props.cases.length),\r\n        // borderColor: \"yellow\",\r\n        data: _.pluck(props.cases, \"confirmed\")\r\n      },\r\n      {\r\n        label: \"Deaths\",\r\n        backgroundColor: \"black\",\r\n        //  _.first(CSS_COLOR_NAMES, props.cases.length),\r\n        // borderColor: \"yellow\",\r\n        data: _.pluck(props.cases, \"deaths\")\r\n      },\r\n      {\r\n        label: \"Recovered\",\r\n        backgroundColor: \"yellow\",\r\n        //  _.first(CSS_COLOR_NAMES, props.cases.length),\r\n        // borderColor: \"yellow\",\r\n        data: _.pluck(props.cases, \"recovered\")\r\n      }\r\n    ]\r\n  };\r\n  const data2 = {\r\n    labels: _.pluck(props.cases, \"state\"),\r\n    datasets: [\r\n      {\r\n        label: [\"Active Cases\"],\r\n        backgroundColor: _.first(CSS_COLOR_NAMES, props.cases.length),\r\n        // borderColor: \"yellow\",\r\n        data: _.pluck(props.cases, \"active\")\r\n      },\r\n      {\r\n        label: [\"Confirmed Cases\"],\r\n        backgroundColor: _.first(CSS_COLOR_NAMES, props.cases.length),\r\n        // borderColor: \"yellow\",\r\n        data: _.pluck(props.cases, \"confirmed\")\r\n      },\r\n      {\r\n        label: \"Deaths\",\r\n        backgroundColor: _.first(CSS_COLOR_NAMES, props.cases.length),\r\n        // borderColor: \"yellow\",\r\n        data: _.pluck(props.cases, \"deaths\")\r\n      },\r\n      {\r\n        label: \"Recovered\",\r\n        backgroundColor: _.first(CSS_COLOR_NAMES, props.cases.length),\r\n        // borderColor: \"yellow\",\r\n        data: _.pluck(props.cases, \"recovered\")\r\n      }\r\n    ]\r\n  };\r\n  const chartOptions = { maintainAspectRatio: false };\r\n  //\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col md={4}>\r\n          {\" \"}\r\n          <Line data={data} height={500} width={700} options={chartOptions} />\r\n        </Col>\r\n        <Col md={4}>\r\n          {\" \"}\r\n          <Doughnut\r\n            data={data2}\r\n            height={500}\r\n            width={700}\r\n            options={chartOptions}\r\n          />\r\n        </Col>\r\n        <Col md={4}>\r\n          {\" \"}\r\n          <Bar data={data} height={500} width={700} options={chartOptions} />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col md={12}>\r\n          <BootstrapTable data={props.cases} keyField=\"state\">\r\n            <TableHeaderColumn dataField=\"state\">State</TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"active\">Active</TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"confirmed\">\r\n              Confirmed\r\n            </TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"deaths\">Deaths</TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"recovered\">\r\n              Recovered\r\n            </TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"deltaconfirmed\">\r\n              Delta confirmed\r\n            </TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"deltadeaths\">\r\n              Delta Deaths\r\n            </TableHeaderColumn>\r\n            <TableHeaderColumn dataField=\"deltarecovered\">\r\n              Delta Recovered\r\n            </TableHeaderColumn>\r\n          </BootstrapTable>{\" \"}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = state => {\r\n  return { cases: state.cases };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return { getStateData: dispatch(fetchJson()) };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(StateWiseCase);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport CoronaCases from \"./CoronaCases\";\r\nimport StateWiseCase from \"./StateWiseCase\";\r\nfunction Main() {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path=\"/CoronaCases\" component={CoronaCases} />\r\n        <Route path=\"/StateWiseCases\" component={StateWiseCase} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\n\nimport \"./App.css\";\nimport { store } from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\nimport CoronaCases from \"./Component/CoronaCases\";\nimport Header from \"./Component/Header\";\nimport Main from \"./Component/Main\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Header />\n        <Main />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}